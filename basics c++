Problem:
Given an array of integers, find the second smallest element.

Input: n=5, arr=[12, 5, 7, 3, 19]

Output: 5

Constraints:

2 <= n <= 10^5

-10^9 <= arr[i] <= 10^9

ðŸ‘‰ You solve it â†’ then I explain optimal solution + time/space complexity.
#include <bits/stdc++.h>
using namespace std;

int minno(vector<int> arr) {
    int s = arr.size();
    int minimum = arr[0]; // start with first element

    for (int i = 1; i < s; i++) {
        if (arr[i] < minimum) {
            minimum = arr[i];
        }
    }
    return minimum;
}

int main() {
    int n;
    cout << "Enter size of array: ";
    cin >> n;

    vector<int> arr(n);
    cout << "Enter " << n << " elements: ";
    for (int i = 0; i < n; i++) {
        cin >> arr[i];
    }

    cout << "Minimum element = " << minno(arr) << endl;
    return 0;
}

Â ðŸ”¥Second Largest element
#include <bits/stdc++.h>
using namespace std;

int secondLargest(vector<int>& num) {
    int n = num.size();
    if(n < 2) return -1; // no second largest

    int first = INT_MIN, second = INT_MIN;
    for(int i = 0; i < n; i++) {
        if(num[i] > first) {
            second = first;
            first = num[i];
        } else if(num[i] > second && num[i] < first) {
            second = num[i];
        }
    }
    return (second == INT_MIN) ? -1 : second; 
}

int main() {
    int n;
    cin >> n;
    vector<int> arr(n);
    for(int i = 0; i < n; i++) {
        cin >> arr[i];
    }

    cout << secondLargest(arr) << endl;
    return 0;
}
